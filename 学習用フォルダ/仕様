backend: spring boot
frontend: react+vite+ts
database: postgresql
docker
docker compose

javaライブラリ
lombok...getter,setter,toString,equals,hashCodeメソッドを自動生成してコードの冗長性を減らしてくれる
ORMフレームワーク
jpa...データベースとのやり取りを簡単にするためのフレームワーク

ログイン認証
spring security...ユーザー認証と認可を管理するためのフレームワーク

MVCアーキテクチャ
RESTful API+React

データの流れ
クライアント（React）からHTTPリクエスト
Controller（@RestController）がリクエストを受け取り、エンティティに変換してServiceに渡す
Service（@Service）でビジネスロジックを処理
Repository（@Repository）でデータベース操作
model(entity)でデータベースのテーブルとアプリケーションのデータをつなぐ
controllerでエンティティをdtoに変換してクライアントに返す

疑問
getter...変数を取り出すだけのメソッド
setter...変数に値をセットするだけのメソッド

project-root/
├── backend/                     # バックエンドアプリケーション
│   ├── src/main/java/com/example/learningTracker/
│   │   ├── config/             # 設定ファイル
│   │   │   ├── CorsConfig.java     # フロントエンドとの通信設定
│   │   │   └── SecurityConfig.java  # セキュリティ設定
│   │   │
│   │   ├── controller/         # APIエンドポイント
│   │   │   ├── AuthController.java        # 認証関連API
│   │   │   └── LearningRecordController.java  # 学習記録API
│   │   │
│   │   ├── model/             # データモデル
│   │   │   ├── User.java          # ユーザーエンティティ
│   │   │   └── LearningRecord.java # 学習記録エンティティ
│   │   │
│   │   ├── repository/        # データベースアクセス
│   │   │   ├── UserRepository.java
│   │   │   └── LearningRecordRepository.java
│   │   │
│   │   ├── dto/              # データ転送オブジェクト
│   │   │   ├── LoginRequest.java
│   │   │   ├── LoginResponse.java
│   │   │   └── RegisterResponse.java
│   │   │
│   │   └── LearningTrackerApplication.java  # メインアプリケーション
│   │
│   └── resources/            # リソースファイル
│       └── application.properties  # アプリケーション設定
│
├── frontend/                 # フロントエンドアプリケーション
│   ├── src/
│   │   ├── components/      # Reactコンポーネント
│   │   │   ├── LoginForm.tsx
│   │   │   ├── RegisterForm.tsx
│   │   │   ├── LearningRecordForm.tsx
│   │   │   └── LearningRecordList.tsx
│   │   │
│   │   ├── contexts/       # Reactコンテキスト
│   │   │   └── AuthContext.tsx  # 認証状態管理
│   │   │
│   │   ├── pages/         # ページコンポーネント
│   │   │   ├── AuthPage.tsx
│   │   │   └── LearningRecordPage.tsx
│   │   │
│   │   ├── types/        # TypeScript型定義
│   │   │   └── LearningRecord.ts
│   │   │
│   │   ├── App.tsx       # メインアプリケーション
│   │   └── main.tsx      # エントリーポイント
│   │
│   └── index.html        # HTMLテンプレート
│
└── docker-compose.yml    # Docker設定