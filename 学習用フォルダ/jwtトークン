jwt(json web token)とは
Json形式のデータを格納して署名付きでやり取りをするトークン、署名付きなので
改善の検知が可能

基本構造
ヘッダー.Header + ペイロード.Payload + 署名.Signature
header
{
    "alg": "HS256",//署名アルゴリズム
    "typ": "jwt"//トークンのタイプ
}
payload
{
    "sub": "1234567890",//ユーザーID
    "name": "John Doe",//ユーザー名
    "iat": 1516239022,//発行時間
    "exp": 1516239022,//有効期限
    "iss": "https://example.com",//発行者
    "aud": "https://example.com",//受信者
}
signature
HMACSHA256(
    base64UrlEncode(header) + "." + base64UrlEncode(payload),
    secret
)

役割

ユーザーがログインすると、サーバーはユーザーにjwtトークンを発行してクライアントに渡す
クライアントはリクエストヘッダーにトークンを含めて送信する
署名付きなので改ざんされていないことを確認できる
サーバー側でセッション情報を保持しないステートレス認証

弱点
ペイロードはBASE64でエンコードされているだけなので誰でも複合できる
jweを使うことでペイロードを暗号化できる

補足１
セッションについて

サーバー側でユーザーの情報を管理する仕組み
ユーザーがログインするとサーバーは一意のセッションIDを発行して
IDとユーザー情報をサーバーのメモリやデータベースに保存する
クライアントはリクエストヘッダーにセッションIDを含めて送信する
セーバーは送信されたセッションIDをもとにユーザー情報を取得する

特徴
サーバーがユーザーの情報や状態を管理する必要があるステートフル
セッションは一定期間で切れる

トークンについて
クライアント側が保持する署名つきデータ
ユーザーがログインするとサーバーはトークンを発行してクライアントに渡す
クライアントはリクエストヘッダーにトークンを含めて送信する
サーバー側はトークンの署名を検証して正当性を確認する

特徴
署名付きなので改ざんされていないことを確認できる
サーバー側でセッション情報を保持しないステートレス認証

弱点
ペイロードはBASE64でエンコードされているだけなので誰でも複合できる
jweを使うことでペイロードを暗号化できる

セッションとトークンの比較
        セッション        トークン
状態管理    ステートフル    ステートレス
データ保存    サーバー    クライアント
リソース消費    多い    少ない
分散システム対応    難しい    容易
セキュリティ    高い    低い（暗号化が必要）
有効期限管理    自動    手動

使いわけ
セッション認証・・・従来のWEBアプリケーションの様に単一サーバーで状態管理が必要な場合
トークン認証・・・SPA、分散システムで状態管理が必要な場合


補足知識2
ステートフルとステートレス
ステートとはサーバーがクライアントの状態を保持しているかどうか

ステートフル・・・サーバーがクライアントの状態を保持している
過去の状態を保持しながら処理ができる
WEBアプリのセッション管理、銀行のATM操作など

ステートレス・・・サーバーがクライアントの状態を保持していない
過去の状態を保持しない
HTTPプロトコル、API通信
